<?xml version="1.0" encoding="UTF-8"?>
<VariablesViewState
   version = "1.0">
   <ContextStates>
      <ContextState
         contextName = "ExpressionContext.rerun(_:):ExpressionContext.swift">
      </ContextState>
      <ContextState
         contextName = "SingularTextData.init(_:):SingularTextData.swift">
         <PersistentStrings>
            <PersistentString
               value = "String(jsonObject[&quot;text&quot;])">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "ExpressionModel.replicate(_:):ExpressionModel.swift">
      </ContextState>
      <ContextState
         contextName = "ExpressionContext.addToHistory(_:):ExpressionContext.swift">
         <PersistentStrings>
            <PersistentString
               value = "expressionData.children.isEmpty">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "VarList.resetItemCallback(_:):VarList.swift">
         <PersistentStrings>
            <PersistentString
               value = "self.varBeanList">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "HistoryList.init():HistoryList.swift">
         <PersistentStrings>
            <PersistentString
               value = "self.historyBeanList">
            </PersistentString>
            <PersistentString
               value = "self.historyBeanList.isEmpty">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "ExpressionData.init(_:):ExpressionData.swift">
         <PersistentStrings>
            <PersistentString
               value = "Bundle.main.infoDictionary?[&quot;CFBundleDisplayName&quot;] as? String ?? &quot;&quot;">
            </PersistentString>
            <PersistentString
               value = "Bundle.main.infoDictionary?[&quot;CFBundleName&quot;] as? String">
            </PersistentString>
            <PersistentString
               value = "NSClassFromString(&quot;T991.&quot;+className)">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "FragmentCalulateController.pressShift():FragmentCalulateController.swift">
         <PersistentStrings>
            <PersistentString
               value = "self.activeFragment.shiftPressed">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "closure #1 in closure #1 in closure #1 in VarItem.body.getter:VarItem.swift">
         <PersistentStrings>
            <PersistentString
               value = "varBean.varName">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "NightMatchUITests.testExample():NightMatchUITests.swift">
         <PersistentStrings>
            <PersistentString
               value = "app.otherElements[&quot;TopView_resultView&quot;].accessibilityValue">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "closure #2 in closure #1 in FragmentCalculateTopView.body.getter:FragmentCalculateTopView.swift">
         <PersistentStrings>
            <PersistentString
               value = "fragmentCalculateController">
            </PersistentString>
            <PersistentString
               value = "activeFragment">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "static VarUtil.resetVar(_:):VarUtil.swift">
      </ContextState>
      <ContextState
         contextName = "closure #1 in closure #3 in closure #1 in closure #1 in KeyboardPanel.body.getter:KeyboardPanel.swift">
         <PersistentStrings>
            <PersistentString
               value = "self.shiftListener">
            </PersistentString>
         </PersistentStrings>
      </ContextState>
      <ContextState
         contextName = "ExpressionModel.getData():ExpressionModel.swift">
      </ContextState>
   </ContextStates>
</VariablesViewState>
